# Banana-Certified Interfaces

## Overview
This repository contains implementations of various neural decoding models for brain-computer interface (BCI) applications. The goal is to predict hand movement trajectories from neural spike recordings using different machine learning and signal processing techniques.

## Repository Structure
The repository follows a structured branching strategy:

- **main**: Contains only the final, validated model for predictions (LSTM).
- **dev**: Used for development and testing before merging into main.

### Model Categories

#### Linear Regression
Contains multivariate linear regression model with Euler integration for improved accuracy. Stats and images added for comparison of initial model performance vs Euler integration.
- **LinRegInit**: Implements an initial linear regression model, later improved with Euler integration and comitted to LinearRegression.

#### Kalman Filter
Contains initial Kalman Filter for now. Stats and images added for comparison of KF vs HSKF implementation.
- **KalmanInit**: Implements the initial Kalman filter (KF).  The current best version is committed to `KalmanFilter` as better than HSKF.
- **HiddenStateKF**: Hidden State Implementation. Worse performance than initial KF.
- **ClassifierKF**: Contains the best classifier (SVM) with KF for improved accuracy vs initial KF.
   - **NBClassifier**: Implements Na√Øve Bayes classification with KF.
   - **SVMClassifier**: Implements Support Vector Machine classification with KF. Commited to `ClassifierKF` and `KalmanFilter` since best model within this family.

#### Deep Learning
- **LSTM**: Implements Long Short-Term Memory network. Commited to `DeepLearning` and `main` since best performance overall.

## Usage
1. Clone the repository:
   ```sh
   git clone https://github.com/eg424/BCI.git
   cd BCI
   ```
2. Switch to the development branch for testing new features:
   ```sh
   git checkout dev
   ```
3. To contribute, create a new branch from `dev`, implement changes, and merge only the best-performing models into `main`.

## Roadmap
- Developed an initial linear regression model, later replaced with Euler's integration.
- Implemented a Kalman Filter. Tested and compared Hidden State implementation, and determined the best classifier-based KF model.
- Optimised LSTM approach and finalised the best performing NN-based decoder.

## Notes
- The neural data have been generously provided by the laboratory of Prof. Krishna Shenoy at Stanford University.

### Contributions
- Mohammed AbuSadeh: Initial Github repository. *Additional Models*: LDA, PCA, XGBoost, Population Vector. *Report*: Statistical Analysis of models.
- Erik Garcia Oyono: Revised GitHub repository. *Models*: Multivariate Linear Regression, Euler, Initial SVM+Kalman, Hidden State Kalman, LSTM. *Report*: LSTM Introduction, Method, Results, and Discussion.
- Virginia Greco: *Models*: Kalman, NB+Kalman. *Report*: Introduction, Kalman, Discussion, Results.
- Helena Kosovac Godart: *Models*: Kalman, NB+Kalman. *Report*: Introduction, Kalman Methods, Discussion and future improvements.
- Anna Pahl: *Models*: SVM+Kalman. *Report*: Abstract, SVM, SVM+Angle-Specific Kalman, Discussion, Conclusion.